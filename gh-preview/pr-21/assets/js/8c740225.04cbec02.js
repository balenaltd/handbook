"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3785],{3905:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>p});var a=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var d=a.createContext({}),u=function(e){var t=a.useContext(d),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},l=function(e){var t=u(e.components);return a.createElement(d.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=u(o),p=n,m=c["".concat(d,".").concat(p)]||c[p]||h[p]||i;return o?a.createElement(m,r(r({ref:t},l),{},{components:o})):a.createElement(m,r({ref:t},l))}));function p(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,r=new Array(i);r[0]=c;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var u=2;u<i;u++)r[u]=o[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,o)}c.displayName="MDXCreateElement"},8692:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=o(7462),n=(o(7294),o(3905));const i={sidebar_position:0},r="What is a product?",s={unversionedId:"products-and-productization/what-is-a-product",id:"products-and-productization/what-is-a-product",title:"What is a product?",description:"Wikipedia says: a product is an object or system made available for consumer use; it is anything that can be offered to a market to satisfy the desire or need of a customer.",source:"@site/docs/products-and-productization/what-is-a-product.md",sourceDirName:"products-and-productization",slug:"/products-and-productization/what-is-a-product",permalink:"/products-and-productization/what-is-a-product",draft:!1,editUrl:"https://github.com/balenaltd/handbook/edit/main/docs/products-and-productization/what-is-a-product.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Products and Productization",permalink:"/products-and-productization/"},next:{title:"Products built from products",permalink:"/products-and-productization/products-built-from-products"}},d={},u=[{value:"Well-defined",id:"well-defined",level:2},{value:"Clear Interfaces",id:"clear-interfaces",level:2},{value:"Useful standalone",id:"useful-standalone",level:2},{value:"Can rely on other products",id:"can-rely-on-other-products",level:2},{value:"Brand/Logo/Documentation",id:"brandlogodocumentation",level:2},{value:"Community",id:"community",level:2},{value:"Build the best or use the best",id:"build-the-best-or-use-the-best",level:2},{value:"Manageable growth",id:"manageable-growth",level:2},{value:"Value over complexity",id:"value-over-complexity",level:2}],l={toc:u};function h(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"what-is-a-product"},"What is a product?"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Wikipedia says:")," ",(0,n.kt)("em",{parentName:"p"},"a product is an object or system made available for consumer use; it is anything that can be offered to a market to satisfy the desire or need of a customer.")),(0,n.kt)("p",null,"Whilst we agree with this, our definition works to expand on the above in order to help us to understand the approaches we should take when defining, carrying out and promoting the work we do at balena. It\u2019s worth noting that we are also users and customers of our own products; we build for ourselves as well as our users."),(0,n.kt)("p",null,"Besides being something that can be offered as a means to satisfy the desire or need of a user, a product should take into account the resources and infrastructure required to keep it alive and maintain a steady state. These characteristics can be used to help identify products as well as helping to establish new products and transition existing projects into becoming their own product."),(0,n.kt)("h2",{id:"well-defined"},"Well-defined"),(0,n.kt)("p",null,"A product should be able to have an \u2018Explain like I\u2019m five\u2019 mission statement, and from that mission statement it should be easy to determine not only what that product does, but what it does not do. It should be easy to explain where it fits in the world and what it offers. If something is hard to explain it\u2019s a good sign that it\u2019s not well defined and perhaps needs to be modularised, broken down into other, smaller parts (which could also become products), so that the resultant description for each of them is a simple elevator pitch."),(0,n.kt)("h2",{id:"clear-interfaces"},"Clear Interfaces"),(0,n.kt)("p",null,"A product should have clear, defined interfaces with the rest of the world. We use the word interface in the most generic sense of the term. As in:"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("em",{parentName:"p"},"A point where two systems, subjects, organizations, etc. meet and interact"))),(0,n.kt)("p",null,"In the case of software-based products, this could mean an API, a user interface, or an exposed set of methods. The important thing is that the boundary where the product stops and the outside world begins is well defined and understood both by the builders and the users of the product."),(0,n.kt)("p",null,"Once established, interfaces should be respected and changes to them carefully considered and published (e.g. using the semantic versioning approach) in order to maintain compatibility with the world outside the product and all of the existing users."),(0,n.kt)("h2",{id:"useful-standalone"},"Useful standalone"),(0,n.kt)("p",null,"A product should be useful to anyone with a relevant use case, even outside of the context of balena. This means that we must always be solving for the generic use case. We are not unique and so the chances are that if we\u2019re solving a problem, there will be other people out there trying to solve the same thing. If a problem looks unique to us, it\u2019s likely to be a signal that we need to break apart what we\u2019re doing into smaller pieces - unraveling the hairball. The product should have availability and general usefulness such that anyone can pick it up, try it, and adopt it for their use case."),(0,n.kt)("p",null,"An example of something not useful standalone is the balenaCloud dashboard. It is a component of balenaCloud, but is not useful outside of that context -- a user cannot take the dashboard and apply it to their own problem, because it\u2019s very specific. However, if we were to break apart the dashboard such that it could be automatically generated by tools (products!) such as autoUI and Rendition, we\u2019ve created something that solves for the generic use case of providing a user interface for a given backend API definition that we are simply users of ourselves. The goal in that case is to make as much of what we do reusable, not just by us, but by others out in the world as well. We do this by creating individual products and stacking them together to build the thing we need rather than just building what we need directly."),(0,n.kt)("h2",{id:"can-rely-on-other-products"},"Can rely on other products"),(0,n.kt)("p",null,"In the case of a software product, it could depend on other libraries or modules that are products in their own right. In the case of hardware, it could depend on integrated circuits, motors, or other components that too are products in their own right. This is a necessity in the avoidance of creating hairballs that can\u2019t be picked apart. Products should be broken down into smaller products where at all possible to increase modularity, split responsibility and reduce complexity."),(0,n.kt)("h2",{id:"brandlogodocumentation"},"Brand/Logo/Documentation"),(0,n.kt)("p",null,"A product can have its own branding and logo. As with the other characteristics, even if this isn\u2019t a priority, it should make sense that the product could have its own branding and ",(0,n.kt)("a",{parentName:"p",href:"https://www.svgrepo.com/"},"logo"),". It wouldn\u2019t make sense to brand something which isn\u2019t a product and doesn\u2019t solve the generic use case, because people won\u2019t be able to apply it to their use case anyway, so why promote it?"),(0,n.kt)("p",null,"A product can have its own landing page/marketing site that describes what it is, what it does and promotes its use. Information and documentation should be provided to communicate the purpose and describe how people can apply the product to their use case."),(0,n.kt)("h2",{id:"community"},"Community"),(0,n.kt)("p",null,"It stands to reason that if something is a product, it should be possible to build a community around it. It should be possible to have discussions, exchange ideas, submit issues, and get support. A product can have its own ambassadors that want to spread the word and communicate the usefulness to the world - this isn\u2019t possible if it\u2019s not solving for the generic use case! The community should be singing the praises of your product, contributing to and improving it, promoting it, and defending it. Community members are likely to push for and utilise the latest features and give feedback. Those outside the community may just use the product for what it is/because it's the best, and not really care about pushing it or getting more involved."),(0,n.kt)("h2",{id:"build-the-best-or-use-the-best"},"Build the best or use the best"),(0,n.kt)("p",null,"A product should be the best at solving its own problem. If there are other products on the market that do the same thing, why aren\u2019t we using them? If the answer isn\u2019t essentially \u2018because it\u2019s rubbish\u2019, we probably shouldn\u2019t be building it. If the answer is \u2018I could make it better / add a feature\u2019 - why not contribute to improving that product? If the foundation is already there, we should help to make it better rather than creating something new. "),(0,n.kt)("p",null,"In the event that an alternative product is perhaps viewed as too expensive, we need to figure out if we're either not understanding (or planning to utilize) its full value, and maybe that's where we might decide to build something more focussed with a subset of the functionality, or perhaps we're not understanding what would be required to implement and maintain such a product. It's a common question from our own customers -- we don't think we're overpriced, but some prospective customers think we are and that they can do the same thing for less."),(0,n.kt)("h2",{id:"manageable-growth"},"Manageable growth"),(0,n.kt)("p",null,"When products are small, ownership and custodianship are possible. You can hold small things in your hand and see all around them. You can see how they interact with the world and what interfaces they have, and obtain a holistic view with relative ease by virtue of their size. Large, unwieldy hairballs are hard to pull apart, and you can\u2019t view all aspects of them at once. You can\u2019t pick them up and look at them."),(0,n.kt)("p",null,(0,n.kt)("img",{src:o(7382).Z,title:"Forms of Growth",width:"1600",height:"1238"}),"\n",(0,n.kt)("em",{parentName:"p"},"(Diagram inspired by ",(0,n.kt)("a",{parentName:"em",href:"https://www.amazon.co.uk/gp/product/0262512939/ref=dbs_a_def_rwt_bibl_vppi_i2"},"L\xe9on Krier")," - Duplication vs Hypertrophy)")),(0,n.kt)("p",null,"Due to this, it\u2019s in our interests to keep products small as our organization grows. This means taking opportunities and making the effort to separate things out into their own products when they start to become too large to easily hold all the context necessary for anyone to understand the mission and contribute. We can take this approach of making sure that we keep productising and splitting things apart as they grow for new products, but in cases where we missed the opportunity and things got out of hand, we\u2019ll need to take the time to go back, de-hairball, and productize where appropriate."),(0,n.kt)("p",null,"This can be mapped to a GitHub organization and the repos it contains. You can imagine that if we had a single GitHub org (balena-io) that contained a single repository within it, the repo would be a nightmare to work with; it would include so much code, documentation, images, containers, processes, etc. that any interaction with it would be very inefficient. It therefore stands to reason that we break this down into individual product repositories where everything can be maintained independently, and that each repo holds the information relating to that particular product in a manner which is valuable in isolation. The aim is to map one repo to one product - this comes with benefits of versioning, changelogs and issue tracking dedicated to that product."),(0,n.kt)("p",null,"For example, a sign that a product is getting hairballed is that you have to consult too many other parties regarding a change in order to make progress. It could be an indicator that there are other products embedded within your product that should have a defined and shared interface to allow changes to be made without disturbing other stakeholders. If you're feeling that you're restricted or slowed down when making changes on a product for logistical or communication reasons, that could also be a sign that it's getting out of hand."),(0,n.kt)("h2",{id:"value-over-complexity"},"Value over complexity"),(0,n.kt)("p",null,"When productizing or de-hairballing, we should aim for value over complexity. It\u2019s better for users if the products they use deliver high value - who doesn\u2019t like good value when they use or buy a product? This doesn\u2019t simply mean monetary value; an easy to install piece of software that delivers high quality, easy to use functionality is high value. The ratio between value and effort expended is very high. Etcher is a great example of this - a simple interface that does a very specific job in a polished and easy to use way."),(0,n.kt)("p",null,"Similarly, it\u2019s better for the product builders (and consequently also the end user) if the product is low in complexity. Easier development, lower maintenance effort, and reduced chance of bugs or unexpected use cases causing a poor user experience."),(0,n.kt)("p",null,"We can think of each product having a score which is a function of complexity and value. High value and simple products score much more highly than low value, complex products."),(0,n.kt)("p",null,(0,n.kt)("img",{src:o(2201).Z,title:"The Product Score",width:"1600",height:"1238"})))}h.isMDXComponent=!0},7382:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/forms-of-growth-55c5f8fff7b3a76c2ab6fb1ff87e8235.png"},2201:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/the-product-score-f4a8973d6414c9f21e4a4fd6d0b7d42f.png"}}]);